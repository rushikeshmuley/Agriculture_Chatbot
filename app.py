import streamlit as st
import google.generativeai as genai
import os

# Set Google API key
os.environ["GOOGLE_API_KEY"] = "AIzaSyAEy_nSYu0jh5t0aKB48dyGDdXpajRVoCo"

# Configure Google API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to get response from Gemini model
def get_gemini_response(input_text, language):
    # Define language-specific prompts
    prompts = {
        "рд╣рд┐рдВрджреА": f"рдкреНрд░рд╢реНрди: {input_text}\nрдЙрддреНрддрд░:",
        "рдорд░рд╛рдареА": f"рдкреНрд░рд╢реНрди: {input_text}\nрдЙрддреНрддрд░:",
        "р┤др┤ор┤┐р┤┤р╡Н": f"роХрпЗро│рпНро╡ро┐: {input_text}\nрокродро┐ро▓рпН:",
        "р░др▒Жр░▓р▒Бр░Чр▒Б": f"р░кр▒Нр░░р░╢р▒Нр░и: {input_text}\nр░╕р░ор░╛р░зр░╛р░ир░В:",
        "р▓Хр▓ир│Нр▓ир▓б": f"р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж: {input_text}\nр▓Йр▓др│Нр▓др▓░:",
        "English": f"Question: {input_text}\nAnswer:"
    }

    # Generate response using the few-shot learning technique
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompts[language])
    return response.text

# Streamlit app initialization
st.set_page_config(page_title="Krishi Sahayak (рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ)", page_icon="ЁЯМ╛")  # Hindi for Agri Assistant

# Title with a symbol and styling
st.title("рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ (рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ) ")  # Hindi for Agri Assistant with Wheat symbol
st.markdown("<p style='text-align: center; font-size: 18px;'>рд╢реЗрддреА рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ!</p>", unsafe_allow_html=True)

# Language selection with Indian languages and styling
language_options = ["рд╣рд┐рдВрджреА", "рдорд░рд╛рдареА", "р┤др┤ор┤┐р┤┤р╡Н", "р░др▒Жр░▓р▒Бр░Чр▒Б", "р▓Хр▓ир│Нр▓ир▓б", "English"]
language = st.selectbox("рднрд╛рд╖рд╛ (Language)", language_options, index=1, format_func=lambda x: f"ЁЯМР {x}")  # Use emoji for better UI

# Application prompt with better UI
st.markdown("""
<h3 style="text-align: center; color: #1E703C;">рдЖрдкрд▓реНрдпрд╛ рд╢реЗрддреАрд╢реА рд╕рдВрдмрдВрдзрд┐рдд рдХрд╛рд╣реА рдкреНрд░рд╢реНрди рдЖрд╣реЗрдд рдХрд╛? </h3>
<p style="text-align: center;">рдЖрдкрд▓реНрдпрд╛рд▓рд╛ рдкреАрдХ, рдЦрдд, рдХрд┐рдбрдмреА рдирд┐рдпрдВрддреНрд░рдг, рдХрд┐рдВрд╡рд╛ рд╢реЗрддреАрд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдгрддреНрдпрд╛рд╣реА рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рдорд┐рд│рд╡рд╛!</p>
<p style="text-align: center;">рдХреГрдкрдпрд╛ рдЦрд╛рд▓реА рдЖрдкрд▓рд╛ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░рд╛ рдЖрдгрд┐ "рдЙрддреНрддрд░ рдорд┐рд│рд╡рд╛" рдмрдЯрдг рджрд╛рдмрд╛.</p>
""", unsafe_allow_html=True)  # Allow HTML formatting for better UI

# Add image related to agriculture
st.image("D:/CHATBOT/Agriculture.jpg", 
         caption="", use_column_width=True)

# Text input for user query with styling
input_text = st.text_input("рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди / Your Question", "")

# Button to trigger chatbot response with a symbol and styling
if st.button("рдЙрддреНрддрд░ рдорд┐рд│рд╡рд╛ (Get Response) ЁЯЪА"):
    if input_text.strip() == "":
        st.warning("рдХреГрдкрдпрд╛ рдПрдХ рдкреНрд░рд╢реНрди рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ / Please enter a question.")
    else:
        response = get_gemini_response(input_text, language)
        st.subheader("рдЙрддреНрддрд░ (Response):" if language != "English" else "Response:")
        st.write(response)
